resourceGroup=AKStest2
location=australiaeast
aksVnet=AKSVnet
aksSubnet=AKSSubnet
apimSubnet=APIMSubnet
aksSubnetPrefix=192.168.1.0/24
vnetAdressPrefixes=192.168.0.0/16
apimAdressPrefixes=192.168.2.0/24
clusterName=HannesAKSCluster
apiManagementName=hannestestaksapim2
publisherEmail="hannesne@microsoft.com" 
publisherName="hannes nel"
ipFilterStartAddress="1.1.1.1"
ipFilterEndAddress="255.255.255.255"

echo "create resource group"
az group create -n $resourceGroup -l $location

echo "create vnet with aks subnet"
az network vnet create --resource-group $resourceGroup --name $aksVnet --address-prefixes $vnetAdressPrefixes --subnet-name $aksSubnet --subnet-prefix $aksSubnetPrefix
echo "create apim subnet"
az network vnet subnet create -n $apimSubnet --vnet-name $aksVnet -g $resourceGroup --address-prefixes $apimAdressPrefixes

echo "retrieve networking ids"
vnetId=$(az network vnet show --resource-group $resourceGroup --name $aksVnet --query id -o tsv)
aksSubnetId=$(az network vnet subnet show --resource-group $resourceGroup --vnet-name $aksVnet --name $aksSubnet --query id -o tsv)
apimSubnetId=$(az network vnet subnet show --resource-group $resourceGroup --vnet-name $aksVnet --name $apimSubnet --query id -o tsv)

echo "create service principal for aks to control vnet"
servicePrincipalId=$(az ad sp create-for-rbac --skip-assignment -o tsv --query appId)
servicePrincipalPassword=$(uuidgen)
az ad sp credential reset --name $servicePrincipalId --password $servicePrincipalPassword
az role assignment create --assignee $servicePrincipalId --scope $vnetId --role Contributor

echo "create aks instance"
az aks create \
    --resource-group $resourceGroup \
    --name $clusterName \
    --node-count 3 \
    --network-plugin kubenet \
    --service-cidr 10.0.0.0/16 \
    --dns-service-ip 10.0.0.10 \
    --pod-cidr 10.244.0.0/16 \
    --docker-bridge-address 172.17.0.1/16 \
    --vnet-subnet-id $aksSubnetId \
    --service-principal $servicePrincipalId \
    --client-secret $servicePrincipalPassword

echo "configure kubectl to connect to aks cluster"
az aks get-credentials -n $clusterName -g $resourceGroup

echo "deploy azure functions runtime and keda to cluster"
kubectl apply -f functions-runtime-deploy.yaml #this yaml generated by running "func kubernetes install --namespace keda --dry-run "

echo "deploy echo function app to cluster"
cat echo-deploy.yaml | sed -e 's#{.loadBalancerSourceRange}#'$apimAdressPrefixes'#;' | kubectl apply -f - #this yaml generated by running "func kubernetes deploy --name echo-http --image-name hannesn/echo --dry-run ". edited to make load balancer internal, and added template for allowed source ips.

echo "retrieve external ip of load balancer"
echo "this might take a while while load balancer is provisioned"
echoServiceIP=''
counter=0
while [ -z "$echoServiceIP" ]
do
  echoServiceIP=$(kubectl get service echo-http -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
  (( counter++ ))
  #try finding the ip adress for 10 minutes before giving up.
  if [ $counter -eq 120 ]
  then
    echo "timed out waiting for load balancer ip to become available"
    exit 1
  else
    sleep 5;
  fi
done

echo "deploy api management"
az group deployment create --resource-group $resourceGroup \
    --template-file apim.json \
    --parameters apiManagementName="$apiManagementName" publisherEmail="$publisherEmail" publisherName="$publisherName" subnetResourceId="$apimSubnetId" echoServiceIP="$echoServiceIP" ipFilterStartAddress="$ipFilterStartAddress" ipFilterEndAddress="$ipFilterEndAddress"

echo "test echo function reachable through api management"
curl https://$apiManagementName.azure-api.net